<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
	var triggerNames = new [] {
		"Inserting",
		"InsertFailed",
		"Inserted",
		"Deleting",
		"DeleteFailed",
		"Deleted",
		"Updating",
		"UpdateFailed",
		"Updated"
	};
	var maxLength = triggerNames.Max(x => x.Length);
#>
using System;
using System.Reactive.Concurrency;
using System.Reactive.Linq;

#if EF_CORE
using EntityFrameworkCore.Triggers;
using Microsoft.EntityFrameworkCore;
namespace EntityFrameworkCore.Rx
#else
using System.Data.Entity;
using EntityFramework.Triggers;
namespace EntityFramework.Rx
#endif
{
	public sealed class DbObservable
	: IDbObservable
	{
		private readonly IDbObservable<Object, DbContext> dbObservable;
		public DbObservable(IDbObservable<Object, DbContext> dbObservable) => this.dbObservable = dbObservable;
<# foreach (var triggerName in triggerNames) { #>
		public static IObservable<I<#= triggerName #>Entry<Object, DbContext>> From<#= triggerName #>() =>
			DbObservable<Object, DbContext>.From<#= triggerName #>();
		public static IObservable<I<#= triggerName #>Entry<Object, DbContext>> From<#= triggerName #>(IScheduler scheduler) =>
			DbObservable<Object, DbContext>.From<#= triggerName #>();
		public static IObservable<I<#= triggerName #>Entry<Object, DbContext, TService>> From<#= triggerName #><TService>() =>
			DbObservable<Object, DbContext>.From<#= triggerName #><TService>();
		public static IObservable<I<#= triggerName #>Entry<Object, DbContext, TService>> From<#= triggerName #><TService>(IScheduler scheduler) =>
			DbObservable<Object, DbContext>.From<#= triggerName #><TService>();

		IObservable<I<#= triggerName #>Entry<Object, DbContext>> IDbObservable.From<#= triggerName #>() =>
			dbObservable.From<#= triggerName #>();
		IObservable<I<#= triggerName #>Entry<Object, DbContext>> IDbObservable.From<#= triggerName #>(IScheduler scheduler) =>
			dbObservable.From<#= triggerName #>();
		IObservable<I<#= triggerName #>Entry<Object, DbContext, TService>> IDbObservable.From<#= triggerName #><TService>() =>
			dbObservable.From<#= triggerName #><TService>();
		IObservable<I<#= triggerName #>Entry<Object, DbContext, TService>> IDbObservable.From<#= triggerName #><TService>(IScheduler scheduler) =>
			dbObservable.From<#= triggerName #><TService>();
<# } #>
	}

	public sealed class DbObservable<TEntity>
	: IDbObservable<TEntity>
	where TEntity : class
	{
		private readonly IDbObservable<TEntity, DbContext> dbObservable;
		public DbObservable(IDbObservable<TEntity, DbContext> dbObservable) => this.dbObservable = dbObservable;
<# foreach (var triggerName in triggerNames) { #>
		public static IObservable<I<#= triggerName #>Entry<TEntity, DbContext>> From<#= triggerName #>() =>
			DbObservable<TEntity, DbContext>.From<#= triggerName #>();
		public static IObservable<I<#= triggerName #>Entry<TEntity, DbContext>> From<#= triggerName #>(IScheduler scheduler) =>
			DbObservable<TEntity, DbContext>.From<#= triggerName #>();
		public static IObservable<I<#= triggerName #>Entry<TEntity, DbContext, TService>> From<#= triggerName #><TService>() =>
			DbObservable<TEntity, DbContext>.From<#= triggerName #><TService>();
		public static IObservable<I<#= triggerName #>Entry<TEntity, DbContext, TService>> From<#= triggerName #><TService>(IScheduler scheduler) =>
			DbObservable<TEntity, DbContext>.From<#= triggerName #><TService>();

		IObservable<I<#= triggerName #>Entry<TEntity, DbContext>> IDbObservable<TEntity>.From<#= triggerName #>() =>
			dbObservable.From<#= triggerName #>();
		IObservable<I<#= triggerName #>Entry<TEntity, DbContext>> IDbObservable<TEntity>.From<#= triggerName #>(IScheduler scheduler) =>
			dbObservable.From<#= triggerName #>();
		IObservable<I<#= triggerName #>Entry<TEntity, DbContext, TService>> IDbObservable<TEntity>.From<#= triggerName #><TService>() =>
			dbObservable.From<#= triggerName #><TService>();
		IObservable<I<#= triggerName #>Entry<TEntity, DbContext, TService>> IDbObservable<TEntity>.From<#= triggerName #><TService>(IScheduler scheduler) =>
			dbObservable.From<#= triggerName #><TService>();
<# } #>
	}

	public sealed class DbObservable<TEntity, TDbContext>
	: IDbObservable<TEntity, TDbContext>
	where TEntity : class
	where TDbContext : DbContext
	{
		private readonly ITriggers<TEntity, TDbContext> triggers;
		public DbObservable(ITriggers<TEntity, TDbContext> triggers) => this.triggers = triggers;
<# foreach (var triggerName in triggerNames) { #>
		public static IObservable<I<#= triggerName #>Entry<TEntity, TDbContext>> From<#= triggerName #>() =>
			Observable.FromEvent<I<#= triggerName #>Entry<TEntity, TDbContext>>(
				Triggers<TEntity, TDbContext>.Global<#= triggerName #>.Add,
				Triggers<TEntity, TDbContext>.Global<#= triggerName #>.Remove
			);
		public static IObservable<I<#= triggerName #>Entry<TEntity, TDbContext>> From<#= triggerName #>(IScheduler scheduler) =>
			Observable.FromEvent<I<#= triggerName #>Entry<TEntity, TDbContext>>(
				Triggers<TEntity, TDbContext>.Global<#= triggerName #>.Add,
				Triggers<TEntity, TDbContext>.Global<#= triggerName #>.Remove,
				scheduler
			);
		public static IObservable<I<#= triggerName #>Entry<TEntity, DbContext, TService>> From<#= triggerName #><TService>() =>
			Observable.FromEvent<I<#= triggerName #>Entry<TEntity, DbContext, TService>>(
				Triggers<TEntity, TDbContext>.Global<#= triggerName #>.Add,
				Triggers<TEntity, TDbContext>.Global<#= triggerName #>.Remove
			);
		public static IObservable<I<#= triggerName #>Entry<TEntity, DbContext, TService>> From<#= triggerName #><TService>(IScheduler scheduler) =>
			Observable.FromEvent<I<#= triggerName #>Entry<TEntity, DbContext, TService>>(
				Triggers<TEntity, TDbContext>.Global<#= triggerName #>.Add,
				Triggers<TEntity, TDbContext>.Global<#= triggerName #>.Remove,
				scheduler
			);

		IObservable<I<#= triggerName #>Entry<TEntity, TDbContext>> IDbObservable<TEntity, TDbContext>.From<#= triggerName #>() =>
			Observable.FromEvent<I<#= triggerName #>Entry<TEntity, TDbContext>>(
				triggers.<#= triggerName #>.Add,
				triggers.<#= triggerName #>.Remove
			);
		IObservable<I<#= triggerName #>Entry<TEntity, TDbContext>> IDbObservable<TEntity, TDbContext>.From<#= triggerName #>(IScheduler scheduler) =>
			Observable.FromEvent<I<#= triggerName #>Entry<TEntity, TDbContext>>(
				triggers.<#= triggerName #>.Add,
				triggers.<#= triggerName #>.Remove,
				scheduler
			);
		IObservable<I<#= triggerName #>Entry<TEntity, TDbContext, TService>> IDbObservable<TEntity, TDbContext>.From<#= triggerName #><TService>() =>
			Observable.FromEvent<I<#= triggerName #>Entry<TEntity, TDbContext, TService>>(
				triggers.<#= triggerName #>.Add,
				triggers.<#= triggerName #>.Remove
			);
		IObservable<I<#= triggerName #>Entry<TEntity, TDbContext, TService>> IDbObservable<TEntity, TDbContext>.From<#= triggerName #><TService>(IScheduler scheduler) =>
			Observable.FromEvent<I<#= triggerName #>Entry<TEntity, TDbContext, TService>>(
				triggers.<#= triggerName #>.Add,
				triggers.<#= triggerName #>.Remove,
				scheduler
			);
<# } #>
	}
}